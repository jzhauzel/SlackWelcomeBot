'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorCodes = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.verifyRequestSignature = verifyRequestSignature;
exports.createHTTPHandler = createHTTPHandler;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _rawBody = require('raw-body');

var _rawBody2 = _interopRequireDefault(_rawBody);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var errorCodes = exports.errorCodes = {
  SIGNATURE_VERIFICATION_FAILURE: 'SLACKHTTPHANDLER_REQUEST_SIGNATURE_VERIFICATION_FAILURE',
  REQUEST_TIME_FAILURE: 'SLACKHTTPHANDLER_REQUEST_TIMELIMIT_FAILURE'
};

var responseStatuses = {
  OK: 200,
  FAILURE: 500,
  REDIRECT: 302,
  NOT_FOUND: 404
};

var debug = (0, _debug2.default)('@slack/events-api:http-handler');

/**
 * Method to verify signature of requests
 *
 * @param {string} signingSecret - Signing secret used to verify request signature
 * @param {string} requestSignature - Signature from request 'x-slack-signature' header
 * @param {number} requestTimestamp - Timestamp from request 'x-slack-request-timestamp' header
 * @param {string} body - Raw body string
 * @returns {boolean} Indicates if request is verified
 */
function verifyRequestSignature(_ref) {
  var signingSecret = _ref.signingSecret,
      requestSignature = _ref.requestSignature,
      requestTimestamp = _ref.requestTimestamp,
      body = _ref.body;

  // Divide current date to match Slack ts format
  // Subtract 5 minutes from current time
  var fiveMinutesAgo = Math.floor(Date.now() / 1000) - 60 * 5;

  if (requestTimestamp < fiveMinutesAgo) {
    debug('request is older than 5 minutes');
    var error = new Error('Slack request signing verification failed');
    error.code = errorCodes.REQUEST_TIME_FAILURE;
    throw error;
  }

  var hmac = _crypto2.default.createHmac('sha256', signingSecret);

  var _requestSignature$spl = requestSignature.split('='),
      _requestSignature$spl2 = _slicedToArray(_requestSignature$spl, 2),
      version = _requestSignature$spl2[0],
      hash = _requestSignature$spl2[1];

  hmac.update(version + ':' + requestTimestamp + ':' + body);

  if (hash !== hmac.digest('hex')) {
    debug('request signature is not valid');
    var _error = new Error('Slack request signing verification failed');
    _error.code = errorCodes.SIGNATURE_VERIFICATION_FAILURE;
    throw _error;
  }

  debug('request signing verification success');
  return true;
}

function createHTTPHandler(adapter) {
  var poweredBy = (0, _util.packageIdentifier)();

  /**
   * Binds a specific response instance to the function that works like a
   * completion handler
   *
   * @param {Object} res - Response object
   * @returns {Function} Returns a function used to send response
   */
  function sendResponse(res) {
    // This function is the completion handler for sending a response to an event. It can either
    // be invoked by automatically or by the user (when using the `waitForResponse` option).
    return function _sendResponse(err, responseOptions) {
      debug('sending response - error: %s, responseOptions: %o', err, responseOptions);
      // Deal with errors up front
      if (err) {
        if (err.status) {
          res.statusCode = err.status;
        } else if (err.code === errorCodes.SIGNATURE_VERIFICATION_FAILURE || err.code === errorCodes.REQUEST_TIME_FAILURE) {
          res.statusCode = responseStatuses.NOT_FOUND;
        } else {
          res.statusCode = responseStatuses.FAILURE;
        }
      } else {
        // First determine the response status
        if (responseOptions) {
          if (responseOptions.failWithNoRetry) {
            res.statusCode = responseStatuses.FAILURE;
          } else if (responseOptions.redirectLocation) {
            res.statusCode = responseStatuses.REDIRECT;
          } else {
            // URL Verification
            res.statusCode = responseStatuses.OK;
          }
        } else {
          res.statusCode = responseStatuses.OK;
        }

        // Next determine the response headers
        if (responseOptions && responseOptions.failWithNoRetry) {
          res.setHeader('X-Slack-No-Retry', '1');
        }
        res.setHeader('X-Slack-Powered-By', poweredBy);
      }

      // Lastly, send the response
      if (responseOptions && responseOptions.content) {
        res.end(responseOptions.content);
      } else {
        res.end();
      }
    };
  }

  /**
   * Abstracts error handling.
   *
   * @param {Error} error
   * @param {Function} respond
   */
  function handleError(error, respond) {
    debug('handling error - message: %s, code: %s', error.message, error.code);
    try {
      if (adapter.waitForResponse) {
        adapter.emit('error', error, respond);
      } else if (process.env.NODE_ENV === 'development') {
        adapter.emit('error', error);
        respond({ status: 500 }, { content: error.message });
      } else {
        adapter.emit('error', error);
        respond(error);
      }
    } catch (userError) {
      process.nextTick(function () {
        throw userError;
      });
    }
  }

  /**
   * Request listener used to handle Slack requests and send responses and
   * verify request signatures
   *
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  return function slackEventRequestListener(req, res) {
    debug('request recieved - method: %s, path: %s', req.method, req.url);

    // Bind a response function to this request's respond object.
    var respond = sendResponse(res);

    (0, _rawBody2.default)(req).then(function (r) {
      var rawBody = r.toString();

      if (verifyRequestSignature({
        signingSecret: adapter.signingSecret,
        requestSignature: req.headers['x-slack-signature'],
        requestTimestamp: req.headers['x-slack-request-timestamp'],
        body: rawBody
      })) {
        // Request signature is verified
        // Parse raw body
        var body = JSON.parse(rawBody);

        // Handle URL verification challenge
        if (body.type === 'url_verification') {
          debug('handling url verification');
          respond(null, { content: body.challenge });
          return;
        }

        var emitArguments = [body.event];
        if (adapter.includeBody) {
          emitArguments.push(body);
        }
        if (adapter.includeHeaders) {
          emitArguments.push(req.headers);
        }
        if (adapter.waitForResponse) {
          emitArguments.push(respond);
        } else {
          respond();
        }

        debug('emitting event -  type: %s, arguments: %o', body.event.type, emitArguments);
        adapter.emit.apply(adapter, [body.event.type].concat(emitArguments));
      }
    }).catch(function (error) {
      handleError(error, respond);
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9odHRwLWhhbmRsZXIuanMiXSwibmFtZXMiOlsidmVyaWZ5UmVxdWVzdFNpZ25hdHVyZSIsImNyZWF0ZUhUVFBIYW5kbGVyIiwiZXJyb3JDb2RlcyIsIlNJR05BVFVSRV9WRVJJRklDQVRJT05fRkFJTFVSRSIsIlJFUVVFU1RfVElNRV9GQUlMVVJFIiwicmVzcG9uc2VTdGF0dXNlcyIsIk9LIiwiRkFJTFVSRSIsIlJFRElSRUNUIiwiTk9UX0ZPVU5EIiwiZGVidWciLCJzaWduaW5nU2VjcmV0IiwicmVxdWVzdFNpZ25hdHVyZSIsInJlcXVlc3RUaW1lc3RhbXAiLCJib2R5IiwiZml2ZU1pbnV0ZXNBZ28iLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwiZXJyb3IiLCJFcnJvciIsImNvZGUiLCJobWFjIiwiY3J5cHRvIiwiY3JlYXRlSG1hYyIsInNwbGl0IiwidmVyc2lvbiIsImhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJhZGFwdGVyIiwicG93ZXJlZEJ5Iiwic2VuZFJlc3BvbnNlIiwicmVzIiwiX3NlbmRSZXNwb25zZSIsImVyciIsInJlc3BvbnNlT3B0aW9ucyIsInN0YXR1cyIsInN0YXR1c0NvZGUiLCJmYWlsV2l0aE5vUmV0cnkiLCJyZWRpcmVjdExvY2F0aW9uIiwic2V0SGVhZGVyIiwiY29udGVudCIsImVuZCIsImhhbmRsZUVycm9yIiwicmVzcG9uZCIsIm1lc3NhZ2UiLCJ3YWl0Rm9yUmVzcG9uc2UiLCJlbWl0IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwidXNlckVycm9yIiwibmV4dFRpY2siLCJzbGFja0V2ZW50UmVxdWVzdExpc3RlbmVyIiwicmVxIiwibWV0aG9kIiwidXJsIiwidGhlbiIsInIiLCJyYXdCb2R5IiwidG9TdHJpbmciLCJoZWFkZXJzIiwiSlNPTiIsInBhcnNlIiwidHlwZSIsImNoYWxsZW5nZSIsImVtaXRBcmd1bWVudHMiLCJldmVudCIsImluY2x1ZGVCb2R5IiwicHVzaCIsImluY2x1ZGVIZWFk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LGVBQVosRUFBNkI7QUFDM0JvQix3QkFBY0csSUFBZCxDQUFtQnpCLE9BQW5CO0FBQ0QsU0FGRCxNQUVPO0FBQ0xBO0FBQ0Q7O0FBRURwQyxjQUFNLDJDQUFOLEVBQW1ESSxLQUFLdUQsS0FBTCxDQUFXSCxJQUE5RCxFQUFvRUUsYUFBcEU7QUFDQXJDLGdCQUFRa0IsSUFBUixpQkFBYW5DLEtBQUt1RCxLQUFMLENBQVdILElBQXhCLFNBQWlDRSxhQUFqQztBQUNEO0FBQ0YsS0FyQ0gsRUFxQ0tLLEtBckNMLENBcUNXLFVBQUNyRCxLQUFELEVBQVc7QUFDbEJ5QixrQkFBWXpCLEtBQVosRUFBbUIwQixPQUFuQjtBQUNELEtBdkNIO0FBd0NELEdBOUNEO0FBK0NEIiwiZmlsZSI6Imh0dHAtaGFuZGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1Z0ZhY3RvcnkgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGdldFJhd0JvZHkgZnJvbSAncmF3LWJvZHknO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgcGFja2FnZUlkZW50aWZpZXIgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgY29uc3QgZXJyb3JDb2RlcyA9IHtcbiAgU0lHTkFUVVJFX1ZFUklGSUNBVElPTl9GQUlMVVJFOiAnU0xBQ0tIVFRQSEFORExFUl9SRVFVRVNUX1NJR05BVFVSRV9WRVJJRklDQVRJT05fRkFJTFVSRScsXG4gIFJFUVVFU1RfVElNRV9GQUlMVVJFOiAnU0xBQ0tIVFRQSEFORExFUl9SRVFVRVNUX1RJTUVMSU1JVF9GQUlMVVJFJyxcbn07XG5cbmNvbnN0IHJlc3BvbnNlU3RhdHVzZXMgPSB7XG4gIE9LOiAyMDAsXG4gIEZBSUxVUkU6IDUwMCxcbiAgUkVESVJFQ1Q6IDMwMixcbiAgTk9UX0ZPVU5EOiA0MDQsXG59O1xuXG5jb25zdCBkZWJ1ZyA9IGRlYnVnRmFjdG9yeSgnQHNsYWNrL2V2ZW50cy1hcGk6aHR0cC1oYW5kbGVyJyk7XG5cbi8qKlxuICogTWV0aG9kIHRvIHZlcmlmeSBzaWduYXR1cmUgb2YgcmVxdWVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2lnbmluZ1NlY3JldCAtIFNpZ25pbmcgc2VjcmV0IHVzZWQgdG8gdmVyaWZ5IHJlcXVlc3Qgc2lnbmF0dXJlXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdFNpZ25hdHVyZSAtIFNpZ25hdHVyZSBmcm9tIHJlcXVlc3QgJ3gtc2xhY2stc2lnbmF0dXJlJyBoZWFkZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSByZXF1ZXN0VGltZXN0YW1wIC0gVGltZXN0YW1wIGZyb20gcmVxdWVzdCAneC1zbGFjay1yZXF1ZXN0LXRpbWVzdGFtcCcgaGVhZGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gYm9keSAtIFJhdyBib2R5IHN0cmluZ1xuICogQHJldHVybnMge2Jvb2xlYW59IEluZGljYXRlcyBpZiByZXF1ZXN0IGlzIHZlcmlmaWVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnlSZXF1ZXN0U2lnbmF0dXJlKHtcbiAgc2lnbmluZ1NlY3JldCwgcmVxdWVzdFNpZ25hdHVyZSwgcmVxdWVzdFRpbWVzdGFtcCwgYm9keSxcbn0pIHtcbiAgLy8gRGl2aWRlIGN1cnJlbnQgZGF0ZSB0byBtYXRjaCBTbGFjayB0cyBmb3JtYXRcbiAgLy8gU3VidHJhY3QgNSBtaW51dGVzIGZyb20gY3VycmVudCB0aW1lXG4gIGNvbnN0IGZpdmVNaW51dGVzQWdvID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkgLSAoNjAgKiA1KTtcblxuICBpZiAocmVxdWVzdFRpbWVzdGFtcCA8IGZpdmVNaW51dGVzQWdvKSB7XG4gICAgZGVidWcoJ3JlcXVlc3QgaXMgb2xkZXIgdGhhbiA1IG1pbnV0ZXMnKTtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignU2xhY2sgcmVxdWVzdCBzaWduaW5nIHZlcmlmaWNhdGlvbiBmYWlsZWQnKTtcbiAgICBlcnJvci5jb2RlID0gZXJyb3JDb2Rlcy5SRVFVRVNUX1RJTUVfRkFJTFVSRTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIGNvbnN0IGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2Jywgc2lnbmluZ1NlY3JldCk7XG4gIGNvbnN0IFt2ZXJzaW9uLCBoYXNoXSA9IHJlcXVlc3RTaWduYXR1cmUuc3BsaXQoJz0nKTtcbiAgaG1hYy51cGRhdGUoYCR7dmVyc2lvbn06JHtyZXF1ZXN0VGltZXN0YW1wfToke2JvZHl9YCk7XG5cbiAgaWYgKGhhc2ggIT09IGhtYWMuZGlnZXN0KCdoZXgnKSkge1xuICAgIGRlYnVnKCdyZXF1ZXN0IHNpZ25hdHVyZSBpcyBub3QgdmFsaWQnKTtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignU2xhY2sgcmVxdWVzdCBzaWduaW5nIHZlcmlmaWNhdGlvbiBmYWlsZWQnKTtcbiAgICBlcnJvci5jb2RlID0gZXJyb3JDb2Rlcy5TSUdOQVRVUkVfVkVSSUZJQ0FUSU9OX0ZBSUxVUkU7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBkZWJ1ZygncmVxdWVzdCBzaWduaW5nIHZlcmlmaWNhdGlvbiBzdWNjZXNzJyk7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSFRUUEhhbmRsZXIoYWRhcHRlcikge1xuICBjb25zdCBwb3dlcmVkQnkgPSBwYWNrYWdlSWRlbnRpZmllcigpO1xuXG4gIC8qKlxuICAgKiBCaW5kcyBhIHNwZWNpZmljIHJlc3BvbnNlIGluc3RhbmNlIHRvIHRoZSBmdW5jdGlvbiB0aGF0IHdvcmtzIGxpa2UgYVxuICAgKiBjb21wbGV0aW9uIGhhbmRsZXJcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlcyAtIFJlc3BvbnNlIG9iamVjdFxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBmdW5jdGlvbiB1c2VkIHRvIHNlbmQgcmVzcG9uc2VcbiAgICovXG4gIGZ1bmN0aW9uIHNlbmRSZXNwb25zZShyZXMpIHtcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHRoZSBjb21wbGV0aW9uIGhhbmRsZXIgZm9yIHNlbmRpbmcgYSByZXNwb25zZSB0byBhbiBldmVudC4gSXQgY2FuIGVpdGhlclxuICAgIC8vIGJlIGludm9rZWQgYnkgYXV0b21hdGljYWxseSBvciBieSB0aGUgdXNlciAod2hlbiB1c2luZyB0aGUgYHdhaXRGb3JSZXNwb25zZWAgb3B0aW9uKS5cbiAgICByZXR1cm4gZnVuY3Rpb24gX3NlbmRSZXNwb25zZShlcnIsIHJlc3BvbnNlT3B0aW9ucykge1xuICAgICAgZGVidWcoJ3NlbmRpbmcgcmVzcG9uc2UgLSBlcnJvcjogJXMsIHJlc3BvbnNlT3B0aW9uczogJW8nLCBlcnIsIHJlc3BvbnNlT3B0aW9ucyk7XG4gICAgICAvLyBEZWFsIHdpdGggZXJyb3JzIHVwIGZyb250XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIuc3RhdHVzKSB7XG4gICAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSBlcnIuc3RhdHVzO1xuICAgICAgICB9IGVsc2UgaWYgKGVyci5jb2RlID09PSBlcnJvckNvZGVzLlNJR05BVFVSRV9WRVJJRklDQVRJT05fRkFJTFVSRSB8fFxuICAgICAgICAgICAgZXJyLmNvZGUgPT09IGVycm9yQ29kZXMuUkVRVUVTVF9USU1FX0ZBSUxVUkUpIHtcbiAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IHJlc3BvbnNlU3RhdHVzZXMuTk9UX0ZPVU5EO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gcmVzcG9uc2VTdGF0dXNlcy5GQUlMVVJFO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGaXJzdCBkZXRlcm1pbmUgdGhlIHJlc3BvbnNlIHN0YXR1c1xuICAgICAgICBpZiAocmVzcG9uc2VPcHRpb25zKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlT3B0aW9ucy5mYWlsV2l0aE5vUmV0cnkpIHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gcmVzcG9uc2VTdGF0dXNlcy5GQUlMVVJFO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VPcHRpb25zLnJlZGlyZWN0TG9jYXRpb24pIHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXNDb2RlID0gcmVzcG9uc2VTdGF0dXNlcy5SRURJUkVDVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVVJMIFZlcmlmaWNhdGlvblxuICAgICAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSByZXNwb25zZVN0YXR1c2VzLk9LO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXMuc3RhdHVzQ29kZSA9IHJlc3BvbnNlU3RhdHVzZXMuT0s7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOZXh0IGRldGVybWluZSB0aGUgcmVzcG9uc2UgaGVhZGVyc1xuICAgICAgICBpZiAocmVzcG9uc2VPcHRpb25zICYmIHJlc3BvbnNlT3B0aW9ucy5mYWlsV2l0aE5vUmV0cnkpIHtcbiAgICAgICAgICByZXMuc2V0SGVhZGVyKCdYLVNsYWNrLU5vLVJldHJ5JywgJzEnKTtcbiAgICAgICAgfVxuICAgICAgICByZXMuc2V0SGVhZGVyKCdYLVNsYWNrLVBvd2VyZWQtQnknLCBwb3dlcmVkQnkpO1xuICAgICAgfVxuXG4gICAgICAvLyBMYXN0bHksIHNlbmQgdGhlIHJlc3BvbnNlXG4gICAgICBpZiAocmVzcG9uc2VPcHRpb25zICYmIHJlc3BvbnNlT3B0aW9ucy5jb250ZW50KSB7XG4gICAgICAgIHJlcy5lbmQocmVzcG9uc2VPcHRpb25zLmNvbnRlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzLmVuZCgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQWJzdHJhY3RzIGVycm9yIGhhbmRsaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNwb25kXG4gICAqL1xuICBmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvciwgcmVzcG9uZCkge1xuICAgIGRlYnVnKCdoYW5kbGluZyBlcnJvciAtIG1lc3NhZ2U6ICVzLCBjb2RlOiAlcycsIGVycm9yLm1lc3NhZ2UsIGVycm9yLmNvZGUpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoYWRhcHRlci53YWl0Rm9yUmVzcG9uc2UpIHtcbiAgICAgICAgYWRhcHRlci5lbWl0KCdlcnJvcicsIGVycm9yLCByZXNwb25kKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgYWRhcHRlci5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgcmVzcG9uZCh7IHN0YXR1czogNTAwIH0sIHsgY29udGVudDogZXJyb3IubWVzc2FnZSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkYXB0ZXIuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgICAgIHJlc3BvbmQoZXJyb3IpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKHVzZXJFcnJvcikge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7IHRocm93IHVzZXJFcnJvcjsgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgbGlzdGVuZXIgdXNlZCB0byBoYW5kbGUgU2xhY2sgcmVxdWVzdHMgYW5kIHNlbmQgcmVzcG9uc2VzIGFuZFxuICAgKiB2ZXJpZnkgcmVxdWVzdCBzaWduYXR1cmVzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXEgLSBSZXF1ZXN0IG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVzIC0gUmVzcG9uc2Ugb2JqZWN0XG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gc2xhY2tFdmVudFJlcXVlc3RMaXN0ZW5lcihyZXEsIHJlcykge1xuICAgIGRlYnVnKCdyZXF1ZXN0IHJlY2lldmVkIC0gbWV0aG9kOiAlcywgcGF0aDogJXMnLCByZXEubWV0aG9kLCByZXEudXJsKTtcblxuICAgIC8vIEJpbmQgYSByZXNwb25zZSBmdW5jdGlvbiB0byB0aGlzIHJlcXVlc3QncyByZXNwb25kIG9iamVjdC5cbiAgICBjb25zdCByZXNwb25kID0gc2VuZFJlc3BvbnNlKHJlcyk7XG5cbiAgICBnZXRSYXdCb2R5KHJlcSlcbiAgICAgIC50aGVuKChyKSA9PiB7XG4gICAgICAgIGNvbnN0IHJhd0JvZHkgPSByLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgaWYgKHZlcmlmeVJlcXVlc3RTaWduYXR1cmUoe1xuICAgICAgICAgIHNpZ25pbmdTZWNyZXQ6IGFkYXB0ZXIuc2lnbmluZ1NlY3JldCxcbiAgICAgICAgICByZXF1ZXN0U2lnbmF0dXJlOiByZXEuaGVhZGVyc1sneC1zbGFjay1zaWduYXR1cmUnXSxcbiAgICAgICAgICByZXF1ZXN0VGltZXN0YW1wOiByZXEuaGVhZGVyc1sneC1zbGFjay1yZXF1ZXN0LXRpbWVzdGFtcCddLFxuICAgICAgICAgIGJvZHk6IHJhd0JvZHksXG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgLy8gUmVxdWVzdCBzaWduYXR1cmUgaXMgdmVyaWZpZWRcbiAgICAgICAgICAvLyBQYXJzZSByYXcgYm9keVxuICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnBhcnNlKHJhd0JvZHkpO1xuXG4gICAgICAgICAgLy8gSGFuZGxlIFVSTCB2ZXJpZmljYXRpb24gY2hhbGxlbmdlXG4gICAgICAgICAgaWYgKGJvZHkudHlwZSA9PT0gJ3VybF92ZXJpZmljYXRpb24nKSB7XG4gICAgICAgICAgICBkZWJ1ZygnaGFuZGxpbmcgdXJsIHZlcmlmaWNhdGlvbicpO1xuICAgICAgICAgICAgcmVzcG9uZChudWxsLCB7IGNvbnRlbnQ6IGJvZHkuY2hhbGxlbmdlIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGVtaXRBcmd1bWVudHMgPSBbYm9keS5ldmVudF07XG4gICAgICAgICAgaWYgKGFkYXB0ZXIuaW5jbHVkZUJvZHkpIHtcbiAgICAgICAgICAgIGVtaXRBcmd1bWVudHMucHVzaChib2R5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFkYXB0ZXIuaW5jbHVkZUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGVtaXRBcmd1bWVudHMucHVzaChyZXEuaGVhZGVycyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhZGFwdGVyLndhaXRGb3JSZXNwb25zZSkge1xuICAgICAgICAgICAgZW1pdEFyZ3VtZW50cy5wdXNoKHJlc3BvbmQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwb25kKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVidWcoJ2VtaXR0aW5nIGV2ZW50IC0gIHR5cGU6ICVzLCBhcmd1bWVudHM6ICVvJywgYm9keS5ldmVudC50eXBlLCBlbWl0QXJndW1lbnRzKTtcbiAgICAgICAgICBhZGFwdGVyLmVtaXQoYm9keS5ldmVudC50eXBlLCAuLi5lbWl0QXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCByZXNwb25kKTtcbiAgICAgIH0pO1xuICB9O1xufVxuIl19
//# sourceMappingURL=http-handler.js.map